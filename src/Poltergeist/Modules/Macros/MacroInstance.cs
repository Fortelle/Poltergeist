using System.Security.Cryptography;
using System.Text;
using Poltergeist.Automations.Macros;
using Poltergeist.Automations.Structures.Parameters;

namespace Poltergeist.Modules.Macros;

/// <summary>
/// Represents a macro instance.
/// </summary>
public class MacroInstance
{
    /// <summary>
    /// Gets the unique identifier for the instance.
    /// </summary>
    /// <remarks>
    /// The <see cref="InstanceId"/> is a case-insensitive string.
    /// The format is not mandatory, but a GUID format is used inside the application.
    /// </remarks>
    public string InstanceId { get; }

    /// <summary>
    /// Gets the template key.
    /// </summary>
    public string TemplateKey { get; }

    /// <summary>
    /// Gets the macro template.
    /// </summary>
    public IFrontMacro? Template { get; init; }

    /// <summary>
    /// Gets the properties of the macro instance.
    /// </summary>
    public MacroInstanceProperties? Properties { get; init; }

    /// <summary>
    /// Gets the collection of options associated with the macro instance.
    /// </summary>
    public SavablePredefinedCollection? Options { get; private set; }

    /// <summary>
    /// Gets the collection of statistical values associated with the macro instance.
    /// </summary>
    public SavablePredefinedCollection? Statistics { get; private set; }

    /// <summary>
    /// Gets the collection of reports generated by the processor.
    /// </summary>
    public ProcessorReportCollection? Reports { get; private set; }

    /// <summary>
    /// Gets a value indicating whether the macro instance was created by the user.
    /// </summary>
    public bool IsUserCreated { get; init; }

    /// <summary>
    /// Gets a value indicating whether the data of the macro instance should be stored on the disk.
    /// </summary>
    public bool IsPersistent { get; init; }

    /// <summary>
    /// Gets a value indicating whether the macro instance is prevented from running by the user.
    /// </summary>
    public bool IsLocked { get; init; }

    /// <summary>
    /// Gets or sets the default start arguments used to execute the macro.
    /// </summary>
    public MacroStartArguments? DefaultStartArguments { get; set; }

    /// <summary>
    /// Gets or sets the private folder of the macro instance.
    /// </summary>
    public string? PrivateFolder { get; set; }

    /// <summary>
    /// Gets the title of the macro instance.
    /// </summary>
    public string? Title => Properties?.Title ?? Template?.Title ?? Template?.Key ?? TemplateKey;

    /// <summary>
    /// Gets the description of the macro instance.
    /// </summary>
    public string? Description => Properties?.Description ?? Template?.Description;

    /// <summary>
    /// Gets the category of the macro instance.
    /// </summary>
    public string? Category => Template?.Category;

    /// <summary>
    /// Gets the icon of the macro instance.
    /// </summary>
    public string? Icon => Properties?.Icon ?? Template?.Icon;

    /// <summary>
    /// Gets a value indicating whether the current template is valid.
    /// </summary>
    public bool IsValid => Template is not null;

    private bool IsLoaded;

    public MacroInstance(IFrontMacro template) : this(template, Guid.NewGuid().ToString())
    {
    }

    public MacroInstance(IFrontMacro template, string instanceId)
    {
        Template = template;
        TemplateKey = template.Key;
        InstanceId = instanceId;
    }

    public MacroInstance(string templateKey) : this(templateKey, Guid.NewGuid().ToString())
    {
    }

    public MacroInstance(string templateKey, string instanceId)
    {
        TemplateKey = templateKey;
        InstanceId = instanceId;
    }

    /// <summary>
    /// Loads the macro instance.
    /// </summary>
    public void Load()
    {
        if (IsLoaded)
        {
            return;
        }

        if (Template is null)
        {
            return;
        }

        Template.Initialize();

        if (Template.Status != MacroStatus.Initialized)
        {
            IsLoaded = true;
            return;
        }

        Options ??= new();
        foreach (var definition in Template.OptionDefinitions)
        {
            if (definition.IsGlobal)
            {
                continue;
            }

            Options.AddDefinition(definition);
        }
        if (!string.IsNullOrEmpty(PrivateFolder))
        {
            try
            {
                Options.Load(Path.Combine(PrivateFolder, "useroptions.json"));
            }
            catch
            {
            }
        }

        Statistics ??= new();
        if (Template.StatisticDefinitions is not null)
        {
            foreach (var definition in Template.StatisticDefinitions)
            {
                if (definition.IsGlobal)
                {
                    continue;
                }

                Statistics.AddDefinition(definition);
            }
        }
        if (!string.IsNullOrEmpty(PrivateFolder))
        {
            try
            {
                Statistics.Load(Path.Combine(PrivateFolder, "statistics.json"));
            }
            catch
            {
            }
        }

        Reports ??= new();
        if (!string.IsNullOrEmpty(PrivateFolder))
        {
            try
            {
                Reports.Load(Path.Combine(PrivateFolder, "reports.json"));
            }
            catch
            {
            }
        }

        IsLoaded = true;
    }

    public static MacroInstance CreateStaticInstance(IFrontMacro template)
    {
        var bytes = Encoding.UTF8.GetBytes(template.Key);
        var hash = MD5.HashData(bytes);
        var instanceId = new Guid(hash).ToString();

        return new MacroInstance(template, instanceId);
    }
}
